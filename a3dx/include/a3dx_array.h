//-------------------------------------------------------------------------------------------------
// File : a3dx_array.h
// Desc : Array Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <a3d.h>
#include <new>


namespace a3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// Array class
///////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
class Array
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    Array()
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    ~Array()
    { term(); }

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pAllocator      アロケータです.
    //! @param[in]      count           確保するアイテム数です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool init(IAllocator* pAlloator, uint32_t count)
    {
        if (pAlloator == nullptr || count <= 0)
        { return false; }

        auto buf = m_pAllocator->Alloc(sizeof(T) * count, alignof(T));
        if (buf == nullptr)
        { return false; }

        m_pAllocator = pAlloator;
        m_Count      = count;
        m_pItems     = new(buf) T[count];

        return true;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void term()
    {
        if (m_pItems != nullptr && m_pAllocator != nullptr)
        {
            auto buf        = m_pItems;
            auto pAllocator = m_pAllocator;
            m_pItems->~T();
            pAllocator->Free(buf);
        }

        m_Count         = 0;
        m_pItems        = nullptr;
        m_pAllocator    = nullptr;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      サイズを取得します.
    //!
    //! @return     サイズを返却します.
    //---------------------------------------------------------------------------------------------
    uint32_t size() const
    { return m_Count; }

    //---------------------------------------------------------------------------------------------
    //! @brief      先頭データを取得します.
    //!
    //! @return     先頭データを返却します.
    //---------------------------------------------------------------------------------------------
    T* data() const
    { return m_pItems; }

    //---------------------------------------------------------------------------------------------
    //! @brief      インデクサです.
    //!
    //! @param[in]      index       配列番号です.
    //! @return     指定された配列番号に対応するアイテムを返却します.
    //---------------------------------------------------------------------------------------------
    T& operator[] (int index)
    { return m_pItems[index]; }

    //---------------------------------------------------------------------------------------------
    //! @brief      インデクサです.
    //!
    //! @param[in]      index       配列番号です.
    //! @return     指定された配列番号に対応するアイテムを返却します.
    //---------------------------------------------------------------------------------------------
    const T& operator[] (int index) const
    { return m_pItems[index]; }

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    IAllocator*     m_pAllocator    = nullptr;      //!< アロケータです.
    uint32_t        m_Count         = 0;            //!< アイテム数です.
    T*              m_pItems        = nullptr;      //!< アイテムです.

    //=============================================================================================
    // private methods.
    //=============================================================================================
    /* NOTHING */
};

} // namespace a3d
