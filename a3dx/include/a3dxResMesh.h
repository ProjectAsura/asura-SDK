//-----------------------------------------------------------------------------
// File : a3dxResMesh.h
// Desc : Mesh Resource.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <a3d.h>
#include <a3dxMath.h>


namespace a3d {

///////////////////////////////////////////////////////////////////////////////
// BoneIndex structure
///////////////////////////////////////////////////////////////////////////////
struct BoneIndex
{
    int x;
    int y;
    int z;
    int w;
};

///////////////////////////////////////////////////////////////////////////////
// MaterialTag union
///////////////////////////////////////////////////////////////////////////////
union MaterialTag
{
    char        Name[64];
    uint64_t    Hash;
};

///////////////////////////////////////////////////////////////////////////////
// ResSubset structure
///////////////////////////////////////////////////////////////////////////////
struct ResSubset
{
    uint32_t    Offset;
    uint32_t    Count;
    uint64_t    MaterialId;
};

///////////////////////////////////////////////////////////////////////////////
// ResMesh class
///////////////////////////////////////////////////////////////////////////////
class ResMesh
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    uint32_t        CountPosition;
    uint32_t        CountColor;
    uint32_t        CountTexCoord0;
    uint32_t        CountTexCoord1;
    uint32_t        CountTexCoord2;
    uint32_t        CountTexCoord3;
    uint32_t        CountNormal;
    uint32_t        CountTangent;
    uint32_t        CountBoneIndex;
    uint32_t        CountBoneWeight;
    uint32_t        CountVertexIndex;
    uint32_t        CountSubset;
    uint32_t        CountMaterial;
    Vector3*        pPosition;
    Vector4*        pColor;
    Vector2*        pTexCoord0;
    Vector2*        pTexCoord1;
    Vector2*        pTexCoord2;
    Vector2*        pTexCoord3;
    Vector3*        pNormal;
    Vector4*        pTangent;
    BoneIndex*      pBoneIndex;
    Vector4*        pBoneWeight;
    uint32_t*       pVertexIndex;
    ResSubset*      pSubset;
    MaterialTag*    pMaterial;

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    ResMesh();

    //-------------------------------------------------------------------------
    //! @brief      読み込み処理を行います.
    //!
    //! @param[in]      pAllocator      アロケータです.
    //! @param[in]      path            ファイルパスです.
    //! @retval true    読み込みに成功.
    //! @retval false   読み込みに失敗.
    //-------------------------------------------------------------------------
    bool Load(IAllocator* pAllocator, const char* path);

    //-------------------------------------------------------------------------
    //! @brief      書き込み処理を行います.
    //!
    //! @param[in]      path        ファイルパスです.
    //! @retval true    書き込みに成功.
    //! @retval false   書き込みに失敗.
    //-------------------------------------------------------------------------
    bool Save(const char* path);

    //-------------------------------------------------------------------------
    //! @brief      破棄処理を行います.
    //-------------------------------------------------------------------------
    void Dispose();

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    IAllocator*     m_pAllocator = nullptr;

    //=========================================================================
    // private methods.
    //=========================================================================
    ResMesh             (const ResMesh&) = delete;
    ResMesh& operator = (const ResMesh&) = delete;
};

} // namespace
