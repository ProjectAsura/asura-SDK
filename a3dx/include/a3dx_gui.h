//-------------------------------------------------------------------------------------------------
// File : a3dx_gui.h
// Desc : Gui Renderer.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <a3d.h>
#include <chrono>
#include <imgui/imgui.h>
#include <a3dx_events.h>


namespace a3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// GuiRenderer class
///////////////////////////////////////////////////////////////////////////////////////////////////
class GuiRenderer
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      インスタンスを取得します.
    //---------------------------------------------------------------------------------------------
    static GuiRenderer& Instance();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      pWindowHandle   ウィンドウハンドル.
    //! @param[in]      width           横幅.
    //! @param[in]      height          縦幅.
    //! @param[in]      colorFormat     カラーフォーマットです.
    //! @param[in]      depthFormat     深度フォーマットです.
    //! @param[in]      fontName        フォント名です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool Init(
        IDevice*        pDevice,
        void*           pWindowHandle,
        uint32_t        width,
        uint32_t        height,
        TargetFormat    colorFormat,
        TargetFormat    depthFormat,
        const char*     fontName);

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      バッファを入れ替えます.
    //---------------------------------------------------------------------------------------------
    void SwapBuffers();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画コマンドを作成します.
    //---------------------------------------------------------------------------------------------
    void MakeCmd(ICommandList* pCmdList);

    //---------------------------------------------------------------------------------------------
    //! @brief      キーボード処理です.
    //---------------------------------------------------------------------------------------------
    void OnKey(const KeyEventArg& arg);

    //---------------------------------------------------------------------------------------------
    //! @brief      マウス処理です.
    //---------------------------------------------------------------------------------------------
    void OnMouse(const MouseEventArg& arg);

    //---------------------------------------------------------------------------------------------
    //! @brief      タイピング処理です.
    //---------------------------------------------------------------------------------------------
    void OnTyping(uint32_t keyCode);

    //---------------------------------------------------------------------------------------------
    //! @brief      リサイズ処理です.
    //---------------------------------------------------------------------------------------------
    void OnResize(const ResizeEventArg& arg);

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    static GuiRenderer  s_Instance;
    const uint32_t      MaxPrimitiveCount = 6 * 1024;
    IDevice*                                m_pDevice;              //!< デバイスです.
    IBuffer*                                m_pVB[2];               //!< 頂点バッファです.
    IBuffer*                                m_pIB[2];               //!< インデックスバッファです.
    IBuffer*                                m_pConstantBuffer;      //!< 定数バッファです.
    IBufferView*                            m_pConstantView;        //!< 定数バッファビューです.
    size_t                                  m_SizeVB[2];            //!< 頂点バッファのサイズです.
    size_t                                  m_SizeIB[2];            //!< インデックスバッファのサイズです.
    ISampler*                               m_pSampler;             //!< サンプラーです.
    ITexture*                               m_pTexture;             //!< テクスチャです.
    ITextureView*                           m_pTextureView;         //!< テクスチャビューです.
    IDescriptorSetLayout*                   m_pDescriptorSetLayout; //!< ディスクリプタレイアウトです.
    IDescriptorSet*                         m_pDescriptorSet;       //!< ディスクリプタセットです.
    IPipelineState*                         m_pPipelineState;       //!< パイプラインステートです.
    ICommandList*                           m_pCommandList;         //!< コマンドリストです.
    int                                     m_BufferIndex;          //!< バッファ番号です.
    float*                                  m_pMappedCB;            //!< 
    std::chrono::system_clock::time_point   m_LastTime;             //!< 更新時刻.

    //=============================================================================================
    // private methods.
    //=============================================================================================
    GuiRenderer();
    ~GuiRenderer();

    //---------------------------------------------------------------------------------------------
    //! @brief      描画コマンドを作成します.
    //---------------------------------------------------------------------------------------------
    void OnDraw(ImDrawData* pData);

    static void Draw(ImDrawData* pData);

    GuiRenderer     (const GuiRenderer&) = delete;
    void operator = (const GuiRenderer&) = delete;
};

} // namespace a3d
