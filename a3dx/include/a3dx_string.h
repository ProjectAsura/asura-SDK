//-------------------------------------------------------------------------------------------------
// File : a3dx_string.h
// Desc : Fixed Size String.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once


namespace a3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// String class
///////////////////////////////////////////////////////////////////////////////////////////////////
template<int Size>
class String
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    String()
    {
        for(auto i=0; i<Size; ++i)
        { m_Value[i] = '\0'; }
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //---------------------------------------------------------------------------------------------
    String(const char* value)
    {
        auto count = 0;
        for(auto i=0; i<Size; ++i)
        {
            if (value[i] == '\0')
            { break; }

            count++;
        }

        for(auto i=0; i<count; ++i)
        { m_Value[i] = value[i]; }

        if (auto i=count; i<Size; ++i)
        { m_Value[i] = '\0'; }
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    ~String()
    { /* DO_NOTHING */ }

    //---------------------------------------------------------------------------------------------
    //! @brief      サイズを取得します.
    //---------------------------------------------------------------------------------------------
    int size() const 
    {
        auto count = 0;
        for(auto i=0; i<Size; ++i)
        {
            if(m_Value[i] == '\0')
            { break; }

            count++;
        }

        return count;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      容量を取得します.
    //---------------------------------------------------------------------------------------------
    int capacity() const
    { return Size; }

    //---------------------------------------------------------------------------------------------
    //! @brief      インデクサです.
    //---------------------------------------------------------------------------------------------
    char& operator[](int index)
    { return m_Value[index]; }

    //---------------------------------------------------------------------------------------------
    //! @brief      インデクサです.
    //---------------------------------------------------------------------------------------------
    const char& operator[](int index) const
    { return m_Value[index]; }

    //---------------------------------------------------------------------------------------------
    //! @brief      空文字列かどうかチェックします.
    //---------------------------------------------------------------------------------------------
    bool empty() const
    { return m_Value[0] == '\0'; }

    //---------------------------------------------------------------------------------------------
    //! @brief      等価比較を行います.
    //---------------------------------------------------------------------------------------------
    bool operator == (const String& value) const
    {
        auto count1 = size();
        auto count2 = value.size();
        if (count1 != count2)
        { return false; }

        for(auto i=0; i<count1; ++i)
        {
            if (m_Value[i] != value.m_Value[i])
            { return false; }
        }

        return true;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      非等価比較を行います.
    //---------------------------------------------------------------------------------------------
    bool operator != (const String& value) const
    {
        auto count1 = size();
        auto count2 = value.size();
        if (count1 == count2)
        { return false; }

        for(auto i=0; i<count1; ++i)
        {
            if (m_Value[i] == value.m_Value[i])
            { return false; }
        }

        return true;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      文字列を連結します.
    //---------------------------------------------------------------------------------------------
    String operator + (const String& value)
    {
        String result;

        auto count1 = size();
        auto count2 = value.size();
        for(auto i=0; i<count1; ++i)
        { result.m_Value[i] = m_Value[i]; }

        for(auto i=count1; i<count2; ++i)
        { result.m_Value[i] = value.m_Value[i]; }

        return result;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      文字列を連結します.
    //---------------------------------------------------------------------------------------------
    String& operator += (const String& value)
    {
        auto count1 = size();
        auto count2 = value.size();

        for(auto i=count1; i<count2; ++i)
        { m_Value[i] = value.m_Value[i]; }

        return *this;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      代入を行います.
    //---------------------------------------------------------------------------------------------
    String& operator = (const String& value)
    {
        for(auto i=0; i<Size; ++i)
        { m_Value[i] = value.m_Value[i]; }

        return *this;
    }

    //---------------------------------------------------------------------------------------------
    //! @brief      代入を行います.
    //---------------------------------------------------------------------------------------------
    String& operator = (const char* value)
    {
        auto count = 0;
        for(auto i=0; i<Size; ++i)
        {
            if (value[i] == '\0')
            { break; }

            m_Value[i] = value[i];
            count++;
        }

        for(auto i=count; i<Size; ++i)
        { m_Value[i] = '\0'; }

        return *this;
    }

private:
    //=============================================================================================
    // private variables.
    //=============================================================================================
    char    m_Value[Size];

    //=============================================================================================
    // private methods.
    //=============================================================================================
    /* NOTHING */
};

} // namespace a3d
