//-------------------------------------------------------------------------------------------------
// File : a3dAccelerationStructure.h
// Desc : Acceleration Structure.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once


namespace a3d {

///////////////////////////////////////////////////////////////////////////////////////////////////
// AccelerationStructure class
///////////////////////////////////////////////////////////////////////////////////////////////////
class AccelerationStructure : public IAccelerationStructure, public BaseAllocator
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      生成処理を行います.
    //! 
    //! @param[in]      pDevice     デバイスです.
    //! @param[in]      pDesc       構成設定です.
    //! @param[out]     ppAS        加速機構の格納先です.
    //! @retval true    生成に成功.
    //! @retval false   生成に失敗.
    //---------------------------------------------------------------------------------------------
    static bool A3D_APIENTRY Create(
        IDevice*                            pDevice,
        const AccelerationStructureDesc*    pDesc,
        IAccelerationStructure**            ppAS);

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを増やします.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY AddRef() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY Release() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウントを取得します.
    //! 
    //! @return     参照カウントを返却します.
    //---------------------------------------------------------------------------------------------
    uint32_t A3D_APIENTRY GetCount() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      デバッグ名を設定します.
    //! 
    //! @param[in]      name        設定するデバッグ名.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY SetName(const char* name) override;

    //---------------------------------------------------------------------------------------------
    //! @brief      デバッグ名を取得します.
    //! 
    //! @return     デバッグ名を返却します.
    //---------------------------------------------------------------------------------------------
    const char* A3D_APIENTRY GetName() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      デバイスを取得します.
    //! 
    //! @param[out]     ppDevice        デバイスの格納先です.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY GetDevice(IDevice** ppDevice) override;

    //---------------------------------------------------------------------------------------------
    //! @brief      デバイスアドレスを取得します.
    //! 
    //! @return     デバイスアドレスを返却します.
    //---------------------------------------------------------------------------------------------
    uint64_t A3D_APIENTRY GetDeviceAddress() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      加速機構を取得します.
    //! 
    //! @return     加速機構を返却します.
    //---------------------------------------------------------------------------------------------
    VkAccelerationStructureKHR A3D_APIENTRY GetVkAccelerationStructure() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      描画コマンドを発行します.
    //! 
    //! @param[in]      pCommandList        コマンドリストです.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY Issue(ICommandList* pCommandList);

private:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // BufferHolder structure
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct BufferHolder
    {
        VkBuffer        Buffer      = null_handle;
        VmaAllocation   Allocation  = null_handle;
    };

    //=============================================================================================
    // private variables.
    //=============================================================================================
    std::atomic<uint32_t>       m_RefCount;     //!< 参照カウントです.
    Device*                     m_pDevice;      //!< デバイスです.
    VkAccelerationStructureKHR  m_AS;           //!< 高速化機構です.
    BufferHolder                m_Structure;    //!< 高速化機構用バッファです.
    BufferHolder                m_Scratch;      //!< スクラッチバッファです.
    bool                        m_AllowUpdate;  //!< 更新が有効なら true.
    ObjectName                  m_Name;         //!< デバッグ名です.

    uint32_t                                    m_GeometryCount;        //!< ジオメトリ数.
    VkAccelerationStructureBuildGeometryInfoKHR m_BuildGeometryInfo;    //!< ビルドジオメトリ情報.
    VkAccelerationStructureGeometryKHR*         m_pGeometries;          //!< ジオメトリデータ.
    VkAccelerationStructureBuildRangeInfoKHR*   m_pBuildRangeInfos;     //!< ビルドレンジ情報.

    //=============================================================================================
    // private methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    A3D_APIENTRY AccelerationStructure();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    A3D_APIENTRY ~AccelerationStructure();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //! 
    //! @param[in]      pDevice     デバイスです.
    //! @param[in]      pDesc       構成設定です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool A3D_APIENTRY Init(IDevice* pDevice, const AccelerationStructureDesc* pDesc);

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      下位レベル高速化機構として初期化します.
    //! 
    //! @param[in]      pDesc       構成設定です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool A3D_APIENTRY InitAsBlas(const AccelerationStructureDesc* pDesc);

    //---------------------------------------------------------------------------------------------
    //! @brief      上位レベル高速化機構として初期化します.
    //! 
    //! @param[in]      pDesc       構成設定です.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool A3D_APIENTRY InitAsTlas(const AccelerationStructureDesc* pDesc);

    bool A3D_APIENTRY CreateScratchBuffer(size_t bufferSize);

    AccelerationStructure               (const AccelerationStructure&) = delete;
    AccelerationStructure& operator =   (const AccelerationStructure&) = delete;
};


} // namespace a3d
