//-------------------------------------------------------------------------------------------------
// File : a3dUtil.h
// Desc : Utility Module.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once


namespace a3d {

//-------------------------------------------------------------------------------------------------
//! @brief      リソースフォーマットのビット数に変換します.
//!
//! @param[in]      format      リソースフォーマットです.
//! @return     リソースフォーマットのビット数を返却します.
//-------------------------------------------------------------------------------------------------
uint32_t ToBits(RESOURCE_FORMAT format);

//-------------------------------------------------------------------------------------------------
//! @brief      ネイティブ形式に変換します.
//!
//! @param[in]      value       A3D形式です.
//! @return     ネイティブ形式に変換したフォーマットを返却します.
//-------------------------------------------------------------------------------------------------
VkFormat ToNativeFormat(RESOURCE_FORMAT value);

//-------------------------------------------------------------------------------------------------
//! @brief      ネイティブ形式に変換します.
//!
//! @param[in]      value       A3D形式です.
//! @return     ネイティブ形式に変換した比較オペレータを返却します.
//-------------------------------------------------------------------------------------------------
VkCompareOp ToNativeCompareOp(COMPARE_OP value);

//-------------------------------------------------------------------------------------------------
//! @brief      ネイティブ形式に変換します.
//!
//! @param[in]      value       A3D形式です.
//! @return     ネイティブ形式に変換したイメージレイアウトを返却します.
//-------------------------------------------------------------------------------------------------
VkImageLayout ToNativeImageLayout(RESOURCE_STATE value);

//-------------------------------------------------------------------------------------------------
//! @brief      ネイティブ形式に変換します.
//!
//! @param[in]      value       A3D形式です.
//! @return     ネイティブ形式に変換したディスクリプタタイプを返却します.
//-------------------------------------------------------------------------------------------------
VkDescriptorType ToNativeDescriptorType(DESCRIPTOR_TYPE value);

//-------------------------------------------------------------------------------------------------
//! @brief      ネイティブ形式に変換します.
//!
//! @param[in]       sampleCount     サンプル数です.
//! @return     ネイティブ形式に変換したサンプル数を返却します.
//-------------------------------------------------------------------------------------------------
VkSampleCountFlagBits ToNativeSampleCountFlags(uint32_t sampleCount);

//-------------------------------------------------------------------------------------------------
//! @brief      メモリタイプインデックスを取得します.
//!
//! @param[in]      deviceMemoryProps       デバイスメモリプロパティです.
//! @param[in]      requirements            メモリ要件です.
//! @param[in]      flags                   メモリプロパティフラグです.
//! @param[out]     result                  メモリタイプインデックスの格納先です.
//! @retval true    メモリタイプインデックスの取得に成功.
//! @retval fasle   メモリタイプインデックスの取得に失敗.
//-------------------------------------------------------------------------------------------------
bool GetMemoryTypeIndex(
    const VkPhysicalDeviceMemoryProperties& deviceMemoryProps,
    const VkMemoryRequirements&             requirements,
    VkMemoryPropertyFlags                   flags,
    uint32_t&                               result
);

//-------------------------------------------------------------------------------------------------
//! @brief      イメージレイアウトを設定します.
//-------------------------------------------------------------------------------------------------
void SetImageLayout(
    VkCommandBuffer         commandBuffer,
    VkImage                 image,
    VkPipelineStageFlags    srcStageMask,
    VkPipelineStageFlags    dstStageMask,
    VkImageLayout           oldLayout,
    VkImageLayout           newLayout,
    VkImageSubresourceRange range
);

//-------------------------------------------------------------------------------------------------
//! @brief      イメージレイアウトを設定します.
//-------------------------------------------------------------------------------------------------
void SetImageLayout(
    VkCommandBuffer         commandBuffer,
    VkPipelineStageFlags    pipelineStage,
    VkImage                 image,
    VkImageLayout           oldLayout,
    VkImageLayout           newLayout,
    VkImageSubresourceRange range
);

//-------------------------------------------------------------------------------------------------
//! @brief      ネイティブアクセスフラグに変換します.
//-------------------------------------------------------------------------------------------------
VkAccessFlags ToNativeAccessFlags(RESOURCE_STATE state);

//-------------------------------------------------------------------------------------------------
//! @brief      イメージビュータイプに変換します.
//-------------------------------------------------------------------------------------------------
VkImageViewType ToNativeImageViewType(a3d::VIEW_DIMENSION value);

//-------------------------------------------------------------------------------------------------
//! @brief      色空間を変換します.
//-------------------------------------------------------------------------------------------------
VkColorSpaceKHR ToNativeColorSpace(a3d::COLOR_SPACE_TYPE value);

//-------------------------------------------------------------------------------------------------
//! @brief      メモリ用途を取得します.
//-------------------------------------------------------------------------------------------------
VmaMemoryUsage ToVmaMemoryUsage(a3d::HEAP_TYPE type);

//-------------------------------------------------------------------------------------------------
//! @brief      文字列に変換します.
//-------------------------------------------------------------------------------------------------
const char* ToString(VkResult result);

} // namespace a3d
