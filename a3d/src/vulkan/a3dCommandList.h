//-------------------------------------------------------------------------------------------------
// File : a3dCommandList.h
// Desc : CommandList Implmentation.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once


namespace a3d {

//-------------------------------------------------------------------------------------------------
// Forward Declarations.
//-------------------------------------------------------------------------------------------------
class DescriptorSetLayout;


///////////////////////////////////////////////////////////////////////////////////////////////////
// CommandList class
///////////////////////////////////////////////////////////////////////////////////////////////////
class A3D_API CommandList : public ICommandList, public BaseAllocator
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    friend struct ICommandList;

public:
    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      生成処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      pDesc           構成設定です.
    //! @param[out]     ppCommandList   コマンドリストの格納先です.
    //! @retval true    生成に成功.
    //! @retval false   生成に失敗.
    //---------------------------------------------------------------------------------------------
    static bool A3D_APIENTRY Create(
        IDevice*                pDevice,
        const CommandListDesc*  pDesc,
        ICommandList**          ppCommandList);

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウンタを増やします.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY AddRef() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      解放処理を行います.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY Release() override;

    //---------------------------------------------------------------------------------------------
    //! @brief      参照カウンタを取得します.
    //!
    //! @return     参照カウンタを返却します.
    //---------------------------------------------------------------------------------------------
    uint32_t A3D_APIENTRY GetCount() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      デバッグ名を設定します.
    //! 
    //! @param[in]      name        設定するデバッグ名.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY SetName(const char* name) override;

    //---------------------------------------------------------------------------------------------
    //! @brief      デバッグ名を取得します.
    //! 
    //! @return     デバッグ名を返却します.
    //---------------------------------------------------------------------------------------------
    const char* A3D_APIENTRY GetName() const override;

    //---------------------------------------------------------------------------------------------
    //! @brief      デバイスを取得します.
    //!
    //! @param[out]     ppDevice        デバイスの格納先です.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY GetDevice(IDevice** ppDevice) override;

    //---------------------------------------------------------------------------------------------
    //! @brief      定数バッファを更新します.
    //!
    //! @param[in]      pBuffer     更新するバッファです.
    //! @param[in]      offset      バッファのオフセットです(バイト単位).
    //! @param[in]      size        書き込みサイズです(バイト単位).
    //! @param[in]      pData       書き込みデータです.
    //! @retval true    更新に成功.
    //! @retval false   更新に失敗.
    //---------------------------------------------------------------------------------------------
    bool A3D_APIENTRY UpdateConstantBuffer(
        IBuffer*    pBuffer,
        size_t      offset,
        size_t      size, 
        const void* pData);

    //---------------------------------------------------------------------------------------------
    //! @brief      コマンドを実行し，完了を待機します.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY Flush();

    //---------------------------------------------------------------------------------------------
    //! @brief      コマンドプールを取得します.
    //!
    //! @return     コマンドプールを返却します.
    //---------------------------------------------------------------------------------------------
    VkCommandPool A3D_APIENTRY GetVkCommandPool() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      コマンドバッファを取得します.
    //!
    //! @return     コマンドバッファを返却します.
    //---------------------------------------------------------------------------------------------
    VkCommandBuffer A3D_APIENTRY GetVkCommandBuffer() const;

private:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // DescriptorInfo union
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct DescriptorInfo
    {
        union
        {
            VkDescriptorImageInfo   Image;          //!< イメージ情報です.
            VkDescriptorBufferInfo  Buffer;         //!< バッファ情報です.
            VkBufferView            BufferView;     //!< バッファビューです.
        };
    };

    //=============================================================================================
    // private variables.
    //=============================================================================================
    std::atomic<uint32_t>       m_RefCount;                     //!< 参照カウントです.
    Device*                     m_pDevice;                      //!< デバイスです.
    VkCommandPool               m_CommandPool;                  //!< コマンドプールです.
    VkCommandBuffer             m_CommandBuffer;                //!< コマンドバッファです.
    bool                        m_BindRenderPass;               //!< レンダーパスバインド中か?
    bool                        m_DirtyDescriptor;              //!< ディスクリプタダーティフラグ.
    DescriptorSetLayout*        m_pDescriptorSetLayout;         //!< ディスクリプタセットレイアウトです.
    DescriptorInfo              m_DescriptorInfo    [MAX_DESCRIPTOR_COUNT] = {};  //!< ディスクリプタ情報です.
    VkWriteDescriptorSet        m_WriteDescriptorSet[MAX_DESCRIPTOR_COUNT] = {};  //!< 書き込みディスクリプタセットです.
    ObjectName                  m_Name;                                           //!< デバッグ名です.

    //=============================================================================================
    // private methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    A3D_APIENTRY CommandList();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    A3D_APIENTRY ~CommandList();

    //---------------------------------------------------------------------------------------------
    //! @brief      初期化処理を行います.
    //!
    //! @param[in]      pDevice     デバイスです.
    //! @param[in]      queueType   キュータイプです.
    //! @param[in]      listType    リストタイプです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //---------------------------------------------------------------------------------------------
    bool A3D_APIENTRY Init(IDevice* pDevice, COMMANDLIST_TYPE listType);

    //---------------------------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY Term();

    //---------------------------------------------------------------------------------------------
    //! @brief      ディスクリプタの更新を行います.
    //---------------------------------------------------------------------------------------------
    void A3D_APIENTRY UpdateDescriptor();

    CommandList     (const CommandList&) = delete;
    void operator = (const CommandList&) = delete;
};


} // namepsace a3d
