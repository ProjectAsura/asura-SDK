//-----------------------------------------------------------------------------
// File : a3dFixString.h
// Desc : Fixed-Size String.
// Copyright(c) Project Asura. All right reserved.
//-----------------------------------------------------------------------------
#pragma once


namespace a3d {

///////////////////////////////////////////////////////////////////////////////
// FixString
///////////////////////////////////////////////////////////////////////////////
template<size_t Count>
class FixString
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    FixString() = default;

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    ~FixString() = default;

    //-------------------------------------------------------------------------
    //! @brief      引数付きコンストラクタです.
    //! 
    //! @param[in]      value       設定する文字列.
    //-------------------------------------------------------------------------
    FixString(const char* value)
    {
        if (value == nullptr)
        {
            for(size_t i=0; i<Count; ++i)
            { m_String[i] = '\0'; }
        }
        else
        {
            size_t index = 0;
            while(value[index] != '\0' && index < Count)
            {
                m_String[index] = value[index];
                index++;
            }
        }
    }

    //-------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //! 
    //! @param[in]      value       代入する文字列.
    //! @return     代入結果を返却します.
    //-------------------------------------------------------------------------
    FixString& operator = (const char* value)
    {
        if (value == nullptr)
        {
            for(size_t i=0; i<Count; ++i)
            { m_String[i] = '\0'; }
            return *this;
        }

        size_t index = 0;
        while(value[index] != '\0' && index < Count)
        {
            m_String[index] = value[index];
            index++;
        }

        return *this;
    }

    //-------------------------------------------------------------------------
    //! @brief      代入演算子です.
    //! 
    //! @param[in]      value       代入する文字列.
    //! @return     代入結果を返却します.
    //-------------------------------------------------------------------------
    FixString& operator = (const FixString& value)
    {
        for(size_t i=0; i<Count; ++i)
        { m_String[i] = value.m_String[i]; }

        return *this;
    }

    //-------------------------------------------------------------------------
    //! @brief      文字列を取得します.
    //! 
    //! @return     文字列を返却します.
    //-------------------------------------------------------------------------
    const char* c_str() const
    { return m_String; }

    //-------------------------------------------------------------------------
    //! @brief      文字数を取得します.
    //! 
    //! @return     文字数を返却します.
    //-------------------------------------------------------------------------
    uint32_t size() const
    {
        uint32_t index = 0;
        while(m_String[index] != '\0' && index < Count)
        { index++; }

        return index;
    }

    //-------------------------------------------------------------------------
    //! @brief      収容可能文字数を取得します.
    //! 
    //! @return     主要可能文字数を返却します.
    //-------------------------------------------------------------------------
    size_t capacity() const
    { return Count; }

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    char    m_String[Count] = {};       //!< 文字列.

    //=========================================================================
    // private methods.
    //=========================================================================
    /* NOTHING */
};

using ObjectName = FixString<64>;

} // namespace a3d
